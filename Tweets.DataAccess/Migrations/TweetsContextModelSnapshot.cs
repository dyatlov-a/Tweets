// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tweets.DataAccess.Contexts;

namespace Tweets.DataAccess.Migrations
{
    [DbContext(typeof(TweetsContext))]
    partial class TweetsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tweets.Domain.Models.Tweets.Tweet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text");

                    b.Property<Guid>("TweetsCollectionId");

                    b.HasKey("Id");

                    b.HasIndex("TweetsCollectionId");

                    b.ToTable("eTweets");
                });

            modelBuilder.Entity("Tweets.Domain.Models.Tweets.TweetsCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Tag");

                    b.HasKey("Id");

                    b.ToTable("eTweetsCollections");
                });

            modelBuilder.Entity("Tweets.Domain.Models.Tweets.Tweet", b =>
                {
                    b.HasOne("Tweets.Domain.Models.Tweets.TweetsCollection", "TweetsCollection")
                        .WithMany("_tweets")
                        .HasForeignKey("TweetsCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
